
//referenced from https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html
Java Virtual Machine Specifications


- Reference Types and Values
	- class type
	- array type
	- interface type


- Run-time data areas
	- The pc Register
		- The Java Virtual Machine can support many threads of execution at once
		- Each Java Virtual Machine thread has its own pc (program counter) register
		- If that method is not native, the pc register contains the address of the Java Virtual Machine instruction currently being executed
		- If the method currently being executed by the thread is native, the value of the Java Virtual Machine's pc register is undefined
	- Java Virtual Machine Stack
		- Each Java Virtual Machine thread has a private Java Virtual Machine stack, created at the same time as the thread.
		- A Java Virtual Machine stack stores frames
		- A Java Virtual Machine stack is analogous to the stack of a conventional language such as C: it holds local variables and partial results, and plays a part in method invocation and return
		- Because the Java Virtual Machine stack is never manipulated directly except to push and pop frames, frames may be heap allocated 
		- This specification permits Java Virtual Machine stacks either to be of a fixed size or to dynamically expand and contract as required by the computation. If the Java Virtual Machine stacks are of a fixed size, the size of each Java Virtual Machine stack may be chosen independently when that stack is created		
	- Heap	
		- The Java Virtual Machine has a heap that is shared among all Java Virtual Machine threads
		- The heap is the run-time data area from which memory for all class instances and arrays is allocated
		- Heap storage for objects is reclaimed by an automatic storage management system (known as a garbage collector); objects are never explicitly deallocated
		- The heap may be of a fixed size or may be expanded as required by the computation and may be contracted if a larger heap becomes unnecessary		
	- Method Area
		- The Java Virtual Machine has a method area that is shared among all Java Virtual Machine threads
		- The method area is analogous to the storage area for compiled code of a conventional language or analogous to the "text" segment in an operating system process
		- It stores per-class structures such as the run-time constant pool, field and method data, and the code for methods and constructors, including the special methods used in class and instance initialization and interface initialization
		- Although the method area is logically part of the heap, simple implementations may choose not to either garbage collect or compact it
		- The method area may be of a fixed size or may be expanded as required by the computation and may be contracted if a larger method area becomes unnecessary
	- Runtime Constant Pool
		- A run-time constant pool is a per-class or per-interface run-time representation of the constant_pool table in a class file
		- It contains several kinds of constants, ranging from numeric literals known at compile-time to method and field references that must be resolved at run-time
		- The run-time constant pool serves a function similar to that of a symbol table for a conventional programming language, although it contains a wider range of data than a typical symbol table
		- Each run-time constant pool is allocated from the Java Virtual Machine's method area
		- The run-time constant pool for a class or interface is constructed when the class or interface is created by the Java Virtual Machine
	- Native Method Stack
		- An implementation of the Java Virtual Machine may use conventional stacks, colloquially called "C stacks," to support native methods (methods written in a language other than the Java programming language)
		- Native method stacks may also be used by the implementation of an interpreter for the Java Virtual Machine's instruction set in a language such as C
		-  Java Virtual Machine implementations that cannot load native methods and that do not themselves rely on conventional stacks need not supply native method stacks. If supplied, native method stacks are typically allocated per thread when each thread is created
		- This specification permits native method stacks either to be of a fixed size or to dynamically expand and contract as required by the computation
		- If the native method stacks are of a fixed size, the size of each native method stack may be chosen independently when that stack is created
		
- Frames